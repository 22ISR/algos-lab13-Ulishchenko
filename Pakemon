
import tkinter as tk
from tkinter import ttk, messagebox
import requests
import threading
from PIL import Image, ImageTk
from io import BytesIO
from datetime import datetime

class SpotifyApp:
    def init(self, root):
        self.root = root
        self.root.title("Spotify Треки")
        self.root.geometry("1200x700")

        self.songs = []
        self.filtered = []
        self.img = None

        self.search = tk.StringVar()
        self.sort = tk.StringVar(value="added_at")
        self.hide_explicit = tk.BooleanVar()

        self.make_ui()
        self.get_data()

    def make_ui(self):
        top = ttk.Frame(self.root)
        top.pack(fill=tk.X, padx=10, pady=10)

        ttk.Label(top, text="Поиск:").pack(side=tk.LEFT)
        search_box = ttk.Entry(top, textvariable=self.search, width=30)
        search_box.pack(side=tk.LEFT, padx=10)
        self.search.trace_add("write", lambda *a: self.update())

        ttk.Label(top, text="Сортировка:").pack(side=tk.LEFT)
        combo = ttk.Combobox(top, textvariable=self.sort, values=["added_at", "duration_ms", "popularity"], width=15, state="readonly")
        combo.pack(side=tk.LEFT, padx=10)
        combo.bind("<<ComboboxSelected>>", lambda e: self.update())

        chk = ttk.Checkbutton(top, text="Скрыть explicit", variable=self.hide_explicit, command=self.update)
        chk.pack(side=tk.LEFT)

        main = ttk.Frame(self.root)
        main.pack(fill=tk.BOTH, expand=True, padx=10)

        left = ttk.Frame(main)
        left.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        self.tree = ttk.Treeview(left, columns=("name", "artist", "duration", "album"), show="headings")
        self.tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        for col in ("name", "artist", "duration", "album"):
            self.tree.heading(col, text=col.capitalize())
            self.tree.column(col, anchor=tk.W, width=150)

        scroll = ttk.Scrollbar(left, command=self.tree.yview)
        scroll.pack(side=tk.RIGHT, fill=tk.Y)
        self.tree.configure(yscrollcommand=scroll.set)

        self.tree.bind("<<TreeviewSelect>>", self.select_song)

        right = ttk.Frame(main, width=300)
        right.pack(side=tk.RIGHT, fill=tk.Y)
        right.pack_propagate(False)

        self.cover = ttk.Label(right, text="Обложка альбома", background="black", foreground="white", anchor=tk.CENTER)
        self.cover.pack(pady=10, padx=10, fill=tk.X)

        self.info = ttk.Label(right, text="", background="white", justify=tk.LEFT, wraplength=280)
        self.info.pack(fill=tk.X, padx=10)

    def get_data(self):
        def load():
            try:
                r = requests.get("https://kitek.ktkv.dev/songs.json", timeout=10)
                if r.status_code == 200:
                    self.songs = r.json()
                    self.root.after(0, self.update)
                else:
                    messagebox.showerror("Ошибка", f"Не удалось загрузить данные: {r.status_code}")
            except Exception as e:
                messagebox.showerror("Ошибка", str(e))
        threading.Thread(target=load, daemon=True).start()

    def update(self):
        self.filtered = []
        s = self.search.get().lower()
        for item in self.songs:
            track = item.get("track", {})
            if self.hide_explicit.get() and track.get("explicit"):
                continue
            name = track.get("name", "").lower()
            artists = " ".join([a["name"].lower() for a in track.get("artists", [])])
            album = track.get("album", {}).get("name", "").lower()
            if s and s not in name and s not in artists and s not in album:
                continue
            self.filtered.append(item)

        if self.sort.get() == "added_at":
            self.filtered.sort(key=lambda x: x.get("added_at", ""), reverse=True)
        else:
            self.filtered.sort(key=lambda x: x.get("track", {}).get(self.sort.get(), 0), reverse=True)

        for row in self.tree.get_children():
            self.tree.delete(row)

for song in self.filtered:
            t = song["track"]
            name = t.get("name", "")
            artist = ", ".join(a["name"] for a in t.get("artists", []))
            album = t.get("album", {}).get("name", "")
            dur = self.time_format(t.get("duration_ms", 0))
            self.tree.insert("", tk.END, values=(name, artist, dur, album))
def time_format(self, ms):
        sec = ms // 1000
        return f"{sec // 60}:{sec % 60:02}"

def select_song(self, event):
        items = self.tree.selection()
        if not items:
            return
        val = self.tree.item(items[0], "values")[0]
        for song in self.filtered:
            if song["track"].get("name") == val:
                self.show_info(song)
                break
def show_info(self, song):
        t = song["track"]
        name = t.get("name", "???")
        artist = ", ".join(a["name"] for a in t.get("artists", []))
        album = t.get("album", {}).get("name", "")
        dur = self.time_format(t.get("duration_ms", 0))
        pop = t.get("popularity", 0)
        explicit = "Да" if t.get("explicit") else "Нет"
        date = song.get("added_at", "")
        try:
            date = datetime.fromisoformat(date.replace("Z", "+00:00")).strftime("%Y-%m-%d")
        except:
            pass

        self.info.config(text=f"Название: {name}\n\nИсполнитель: {artist}\n\nАльбом: {album}\n\nДлительность: {dur}\n\nПопулярность: {pop}\n\nExplicit: {explicit}\n\nДата добавления: {date}")

        imgs = t.get("album", {}).get("images", [])
        if imgs:
            url = imgs[1]["url"] if len(imgs) > 1 else imgs[0]["url"]
            self.download_img(url)
        else:
            self.cover.config(image="", text="Обложка альбома")
            self.img = None
def download_img(self, url):
        def load():
            try:
                r = requests.get(url, timeout=10)
                if r.status_code == 200:
                    img = Image.open(BytesIO(r.content)).resize((250, 250))
                    self.img = ImageTk.PhotoImage(img)
                    self.root.after(0, lambda: self.cover.config(image=self.img, text=""))
            except Exception as e:
                print("Ошибка загрузки:", e)
        threading.Thread(target=load, daemon=True).start()

if name == "main":
    root = tk.Tk()
    app = SpotifyApp(root)
    root.mainloop()
